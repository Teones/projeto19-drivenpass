// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id              Int        @id @default(autoincrement())
  email           String     @unique
  password        String
  sessions        Sessions[]
  cards           Cards[]
  credentials     Crecentials[]
  secureNotes     SecureNotes[]
  wifiPasswords   WifiPasswords[]

  @@map("users")
}

model Sessions {
  id              Int         @id @default(autoincrement())
  token           String
  session         Users       @relation(fields: [userId], references: [id])
  userId          Int

  @@map("sessions")
}

model Cards {
  id              Int         @id @default(autoincrement())
  title           String
  cardNumber      String      @unique
  cardholderName  String
  securityCode    String
  isVirtual       Boolean
  cardType        CardType
  flag            CardFlag
  card            Users       @relation(fields: [userId], references: [id])
  userId          Int

  @@unique(fields: [userId, title], name: "titleByUser")
  @@map("cards")
}

enum CardType {
  credit
  debit
  ambos
}

enum CardFlag {
  visa
  mastercard
  elo
  hipercard
  americanExpress
}

model Crecentials {
  id              Int         @id @default(autoincrement())
  title           String      @unique
  url             String
  login           String
  password        String
  credential      Users       @relation(fields: [userId], references: [id])
  userId          Int

  @@unique(fields: [userId, title], name: "titleByUser")
  @@map("credentials")
}

model SecureNotes {
  id              Int         @id @default(autoincrement())
  title           String      
  note            String
  secureNote      Users       @relation(fields: [userId], references: [id])
  userId          Int

  @@index([id, userId])
  @@unique(fields: [userId, title], name: "titleByUser")
  @@map("secureNotes")
}

model WifiPasswords {
  id              Int         @id @default(autoincrement())
  title           String
  name            String      
  password        String
  wifiPassword    Users       @relation(fields: [userId], references: [id])
  userId          Int

  @@unique(fields: [userId, title], name: "titleByUser")
  @@map("wifiPasswords")
}